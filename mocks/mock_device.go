// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jszumigaj/hart (interfaces: DeviceIdentifier)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	status "github.com/jszumigaj/hart/status"
)

// MockDeviceIdentifier is a mock of DeviceIdentifier interface.
type MockDeviceIdentifier struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceIdentifierMockRecorder
}

// MockDeviceIdentifierMockRecorder is the mock recorder for MockDeviceIdentifier.
type MockDeviceIdentifierMockRecorder struct {
	mock *MockDeviceIdentifier
}

// NewMockDeviceIdentifier creates a new mock instance.
func NewMockDeviceIdentifier(ctrl *gomock.Controller) *MockDeviceIdentifier {
	mock := &MockDeviceIdentifier{ctrl: ctrl}
	mock.recorder = &MockDeviceIdentifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceIdentifier) EXPECT() *MockDeviceIdentifierMockRecorder {
	return m.recorder
}

// Id mocks base method.
func (m *MockDeviceIdentifier) Id() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockDeviceIdentifierMockRecorder) Id() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockDeviceIdentifier)(nil).Id))
}

// ManufacturerId mocks base method.
func (m *MockDeviceIdentifier) ManufacturerId() byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManufacturerId")
	ret0, _ := ret[0].(byte)
	return ret0
}

// ManufacturerId indicates an expected call of ManufacturerId.
func (mr *MockDeviceIdentifierMockRecorder) ManufacturerId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManufacturerId", reflect.TypeOf((*MockDeviceIdentifier)(nil).ManufacturerId))
}

// MfrsDeviceType mocks base method.
func (m *MockDeviceIdentifier) MfrsDeviceType() byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MfrsDeviceType")
	ret0, _ := ret[0].(byte)
	return ret0
}

// MfrsDeviceType indicates an expected call of MfrsDeviceType.
func (mr *MockDeviceIdentifierMockRecorder) MfrsDeviceType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MfrsDeviceType", reflect.TypeOf((*MockDeviceIdentifier)(nil).MfrsDeviceType))
}

// PollAddress mocks base method.
func (m *MockDeviceIdentifier) PollAddress() byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollAddress")
	ret0, _ := ret[0].(byte)
	return ret0
}

// PollAddress indicates an expected call of PollAddress.
func (mr *MockDeviceIdentifierMockRecorder) PollAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollAddress", reflect.TypeOf((*MockDeviceIdentifier)(nil).PollAddress))
}

// Preambles mocks base method.
func (m *MockDeviceIdentifier) Preambles() byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Preambles")
	ret0, _ := ret[0].(byte)
	return ret0
}

// Preambles indicates an expected call of Preambles.
func (mr *MockDeviceIdentifierMockRecorder) Preambles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preambles", reflect.TypeOf((*MockDeviceIdentifier)(nil).Preambles))
}

// SetStatus mocks base method.
func (m *MockDeviceIdentifier) SetStatus(arg0 status.FieldDeviceStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatus", arg0)
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockDeviceIdentifierMockRecorder) SetStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockDeviceIdentifier)(nil).SetStatus), arg0)
}

// Status mocks base method.
func (m *MockDeviceIdentifier) Status() status.FieldDeviceStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(status.FieldDeviceStatus)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockDeviceIdentifierMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockDeviceIdentifier)(nil).Status))
}
